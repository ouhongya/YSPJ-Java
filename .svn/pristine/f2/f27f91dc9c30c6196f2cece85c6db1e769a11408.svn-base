package com.fh.controller.app;

import com.fh.controller.base.BaseController;
import com.fh.entity.app.Topic;
import com.fh.service.app.ExamService;
import com.fh.util.PageData;
import com.fh.util.ResultModel;
import com.github.pagehelper.PageInfo;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import java.util.List;


@RestController
@RequestMapping("/api/v1")
@Api(tags = "题库接口")
public class ExamController extends BaseController {

    @Autowired
    ExamService examService;


    @RequestMapping("/queryQuestionBankList")
    @ApiOperation("题库列表")
    public ResultModel<PageInfo> queryQuestionBankList() throws Exception {
        return ResultModel.success(examService.queryQuestionBankList(this.getPageData()));
    }

    @RequestMapping("/queryQuestionBankListNotLimit")
    @ApiOperation("题库列表不分页")
    public ResultModel<List<PageData>> queryQuestionBankListNotLimit() throws Exception {
        return ResultModel.success(examService.queryQuestionBankListNotLimit(this.getPageData()));
    }

    @RequestMapping("/addQuestionBank")
    @ApiOperation("添加题库")
    public ResultModel<String> addQuestionBank() throws Exception {
        return ResultModel.success(examService.addQuestionBank(this.getPageData()));
    }

    @RequestMapping("/deleteQuestionBank")
    @ApiOperation("删除题库")
    public ResultModel<String> deleteQuestionBank() throws Exception {
        return ResultModel.success(examService.deleteQuestionBank(this.getPageData()));
    }

    @RequestMapping("/statusQuestionBank")
    @ApiOperation("停用/启用/默认题库")
    public ResultModel<String> statusQuestionBank() throws Exception {
        return ResultModel.success(examService.statusQuestionBank(this.getPageData()));
    }

    @RequestMapping("/remarkQuestionBank")
    @ApiOperation("重命名题库")
    public ResultModel<String> remarkQuestionBank() throws Exception {
        return ResultModel.success(examService.remarkQuestionBank(this.getPageData()));
    }

    @RequestMapping("/addOneTopic")
    @ApiOperation("添加试题")
    public ResultModel<String> addOneTopic() throws Exception {
        return ResultModel.success(examService.addOneTopic(this.getPageData()));
    }

    @RequestMapping("/editOneTopic")
    @ApiOperation("编辑试题")
    public ResultModel<String> editOneTopic() throws Exception {
        return ResultModel.success(examService.editOneTopic(this.getPageData()));
    }


    @RequestMapping("/queryOneTopic")
    @ApiOperation("查询试题")
    public ResultModel<Topic> queryOneTopic() throws Exception {
        return ResultModel.success(examService.queryOneTopic(this.getPageData()));
    }

    @RequestMapping("/addBatckTopic")
    @ApiOperation("批量添加试题")
    public ResultModel<String> addBatckTopic() throws Exception {
        return ResultModel.success(examService.addBatckTopic(this.getPageData()));
    }

    @RequestMapping("/queryBankDetail")
    @ApiOperation("查询题库详情")
    public ResultModel<PageData> queryBankDetail() throws Exception {
        return ResultModel.success(examService.queryBankDetail(this.getPageData()));
    }

    @RequestMapping("/updateExcelStatus")
    @ApiOperation("题库Excel停用/启用/删除")
    public ResultModel<String> updateExcelStatus() throws Exception {
        return ResultModel.success(examService.updateExcelStatus(this.getPageData()));
    }

    @RequestMapping("/updateOneTopicStatus")
    @ApiOperation("单题停用/启用/删除")
    public ResultModel<String> updateOneTopicStatus() throws Exception {
        return ResultModel.success(examService.updateOneTopicStatus(this.getPageData()));
    }
}
